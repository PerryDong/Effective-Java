当谈论到公有类的时候，坚持面向对象设计思想的看法是正确的：如果类可以在它所在的包的外部进行访问是，就提供访问方法，
以保留将来改变该类内部表示法的灵活性。如果公有类暴露了它的数据域，要想在将来改变其内部表示法是不可能的，因为公有类的客户
端代码已经遍布各处了。
然而，如果类是包级私有的，或者是私有的嵌套类，直接暴露它的数据域并没有什么本质的错误。这种方法比访问方法的做法更不会产生
视觉混乱，无论是在类定义中，还是在使用该类的客户端代码中。虽然客户端代码与该类的内部表示法紧密相连， 但是这些代码被限定在
包含该类的包中。如果有必要，不改变包之外的任何代码而只改变内部的数据表示法也是可以的。在私有的嵌套类的情况下，改变以的作用
范围又进一步限制在外围类中。这样问题变得更加不明显了。

果域是不可改变的，那么让公有类直接暴露域的害处会比较小一点。但是，如果不改变类的API，就无法改变以这种类表示法，当域被读取的
时候，也无法采取辅助的行动，但是还是可以强加约束条件的。如下例：
public final class Time {  
    private static final int HOURS_PER_DAY = 24;  
    private static final int MINUTES_PER_HOUR = 60;  
      
    public final int hour;  
    public final int minute;  
      
    public Time(int hour, int minute) {  
        if (hour < 0 || hour >= HOURS_PER_DAY)  
            throw new IllegalArgumentException("Hour: " + hour);  
        if (minute < 0 || minute >= MINUTES_PER_HOUR)  
            throw new IllegalArgumentException("Minute: " + minute);  
        this.hour = hour;  
        this.minute = minute;  
    }  
    // Remainder omitted  
}  

规则：
公有类永远都不应该暴露可变的域，有时候会需要用包级私有的或者私有的嵌套类来暴露域，无论这个类的域是可变的还是不可变的。