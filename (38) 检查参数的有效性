每当编写方法或者构造器的时候，应该考虑它的参数有哪些限制，在方法的开头处对参数进行检查，并且把这些限制写入文档，通过显式的检查来实施这些限制。
1）对于公有的方法，要用Javadoc 的throws标签在文档中说明违反参数值限制时会抛出的异常。
public BigInteger mod(BigInteger m) {
  if(m.signum() <= 0) {
    throw new ArithmeticException("Modulus <= 0: " + m);
    ...
  }
}

2）对于非公有的方法，通常使用断言来检查他们的参数：断言如果失败，抛出AssertionError；如果没有起到作用，本质上也不会有成本开销
private void sort(long a[]){
    assert a != null;
    ...
}

3）对于构造函数中的，或者参数将会被保存，后面还会用到的，尤其应该注意检查有效性

这一规则也有例外，在有些情况下，有效性检查工作非常昂贵，或者根本是不切实际的，而且有效性检查已隐含在计算过程中完成。
