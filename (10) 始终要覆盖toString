toString()方法在Object中已存在一个实现，如下：
public String toString() {  
    return getClass().getName() + "@" + Integer.toHexString(hashCode());  
}  
toString方法虽然不会像equals这样的方法对类造成那么大的影响，但是一个好的toString可以使类用起来更加的舒服。当对象被传给
println、printf、字符串联操作符(+)以及assert或者被调试器打印出来时，toString方法会被自动调用。这是一种重要的调用手段，
如果不重写toString提供更明确的信息，这将很难让人理解。

在实际应用中，toString方法应该返回对象中包含的所有值得关注的信息，如果对象太大或者对象中包含的状态信息难以用字符来表达，这样
做就有点不切实际了。在这种情况下toString方法应该返回一个摘要信息，理想情况下，字符串应该是自描述的。在实现toString方法时，应
该做出一个重要的决定，是否在文档中指定返回值的格式，对于值类也建议这么做，因为这可以被用做一种标准的、明确的、适合人阅读的对
象表示法。这种表示法可以用于输入和输出以及用在永久的适合于人类阅读的数据对象中，如xml文档。如果指定了格式，那么就最好再提供
一个相匹配的静态工厂方法或者构造器，以便程序员可以很容易地在对象和它的字符串表示法之间来回切换。Java平台类库中的许多值类都采
用这种做法，包括BigInteger、BigDecimal和绝大多数的基本类型包装类(boxed primitive class)。

指定格式也有其不足的地方，就是限制了toString()的灵活性，一旦指定了格式就必须坚持这种格式，程序员会编写相应的代码来解析这种字
符串表示法，产生字符串表示法，以及把字符串表示嵌入到持久的数据中。如果将来的版本中改变了这种做法就会破坏他们的代码和数据。如
果不指定格式的话就可以保留灵活。无论是否决定指定格式，都应该在文档中明确地表明你的意图。

最后，无论是否指定格式，都要为toString返回值中包含的所有信息，提供一种编程式的访问途径。这样不仅可以提高程序的性能而且还会为回
避掉在解析格式化字符串的过程出可能会出现错误的问题。