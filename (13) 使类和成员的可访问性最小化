Java中的访问控制机制(access control)为信息隐藏提供了重要保障，它决定了类、接口和成员的可访问性(accessibility)。实体的可访问
性由该实体声名所在的位置，以及实体声名中所出现的访问修饰符(private、protected和public或者是默认的)共同决定。
最基本的规则是：尽可能使每个类或者成员不被外界访问。也就是尽可能将访问级别降到最低。

对于顶层的(非嵌套的)类和接口，只有两种可能的访问级别：包级私有(package-private)和公有的(public)。如果你用public修饰符声名了
顶层类和接口，那它就是公有的，否则它将是包级私有的。如果类或者接口能够被做成包级私有的，它就应该被做成包级私有的，通过把类
或者接口做成包级私有的使它实际上成了这个包的实现的一部分，而不是该包导出的API的一部分，如果将来需要对其进行修改、替换、或者
删除，无需担心会影响到现有的客户端。如果将它做成了公有的，那么它就变成了API的一部分，开发者就有责任永远支持它，以保持它们的兼容性。

如果一个包级私有的顶层类或接口只是在某一个类的内部被用到，那就应该考虑将它做成特定类的内部类，这样可以将它的可访问范围从包中
的所有类缩小到使用它的那个类。然而，降低不必要的仅有类的可访问性比降低包级私有的顶层类要更重要，因为公有类是包的API的一部分，
而包级私有的顶层类则已经是这个包的实现的一部分。
对于成员(包括域、方法、嵌套类和嵌套接口)有四种可能的访问级别：
1） 私有的(private)：只有在声明该成员的顶层类内部才可以访问这个成员。
2） 包级私有的(package-private)：声明该成员的包内部的任何类都可以访问这个成员。这也被称为“缺省(default)访问级别”，如果没有为成员
	指定访问修饰符，就采用这个访问级别。
3） 受保护的(protected)：声明该成员的类的子类可以访问这个成员，并且，声名该 成员的包内部的任何类也可以访问这个成员。
4） 公有的(public)：在任何地方都可以访问该成员。

如果方法覆盖了超类中的一个方法，那么子类中的访问级别不允许低于超类中的访问级别，这样可以确保任何使用超类的实例的地方也都可以使用子类的实例。
实例域是不能公有的。如果域是非final的，或者是指向一个可变对象的(如数组)final引用，那么一旦使这个域成为公有的那么这将意味着
放弃了对存储在这个域中的值进行限制的能力，也放弃了强制这个域不可变的能力。
同样的建议也适用于静态域，只是有一种例外情况。假设常量构成了类提供的整个抽象中的一部分，可以通过仅有的静态final域来暴露这些常量。
这种域的名子由大写字母组成，单词之间用下划线隔开。

规则：
应该始终尽可能地降低可访问性。在仔细设计了一个最小的公有API之后，应该防止把任何散乱的类、接口和成员变成API的一部分。
除了仅有静态final域的特殊情形之外，公有类都不应该包含公有域。并且要确保公有静态final域所引用的对象都是不可变的。