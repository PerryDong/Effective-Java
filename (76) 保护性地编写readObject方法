针对第39条的日期类，假设决定要把这个类做成可序列化的，因为Period对象的物理表示法正好反映了它的逻辑数据内容，貌似使用默认的序列化也是蛮合理的，
增加implements Serializable即可。但是如果真的这么做，那么这个类将不再保证它的关键约束了

因为readObject()方法相当于另一个公有的构造器，“用字节流作为唯一参数”的构造器，如同其他的构造器一样，它也要求注意同样的所有注意事项。构造器必须检查
其参数的有效性，并且在必要的时候对参数进行保护性拷贝，同样地，readObject方法也需要这样做。
private void readObject(ObjectInputStream s) throws IOException,ClassNotFoundException {
	s.defaultReadObject();
	
	start=new Date(start.getTime());//进行保护性拷贝
	end=new Date(end.getTime());
	
	if(start.compareTo(end)>0)//进行安全性检查
		throw new InvalidObjectException(start +"after"+ end);
}

编写readObject方法的指导方针：
  1）对于对象引用域必须保持私有的类，要保护性得拷贝这个域中的每个对象；
  2）对于任何约束条件，如果检查失败，则应该抛出一个InvalidObjectException异常；
  3）如果整个对象图在被反序列化之后必须进行验证，就应该使用ObjectInputValidation接口；
  4）论是直接方式还是间接方法，都不要调用类中任何可被覆盖的方法。
