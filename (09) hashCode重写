覆盖equals时总要覆盖hashCode
通用方法：
1）把某个非零的数值，比如说17，保存在一个名为result的int类型的变量中
2）对于对象中每个关键域f（equals方法中涉及的每个域），完成以下步骤：

 a.为改域计算int类型的散列码c:
  i.   如果该域是boolean类型，则计算（f ? 1 : 0）
  ii.  如果该域是byte、char、short、或者int类型，计算 (int)f
  iii. 如果该域是long类型，计算 (int)(f^(f>>>32))
  iv.  如果该域是float类型，计算Float.floatToIntBits(f)
  v.   如果该域是double类型，计算Double.doubleToLongBits(f)，然后按照2.a.iii，为得到的long类型计算散列值。
  vi.  如果该域是一个对象的引用，并且该类的equals方法通过递归地调用equals的方式来比较这个域，
       则同样为这个域递归地调用hashCode。如果需要更复杂的比较，则为这个域计算一个“范式”，然后针对这个范式调用hashCode。
       如果这个域的值是null，则返回0
  vii. 如果该域是一个数组，则把每一个元素当做单独的域来处理。也就是说，递归地应用上述规则，对每个重要的元素计算一个散列码，
       然后根据步骤2.b中的做法把这些散列值组合起来。如果数组域中的每个元素都很重要，可以使用Arrays.hashCode方法。

 b.按照下面的公式，把步骤2.a中计算得到的散列码c合并到result中：
             result = 31 * result + c
3) 返回result
4) 测试修正。
