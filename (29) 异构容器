一般来说，一个Set只有一个类型参数，表示它的元素类型；一个Map有两个类型参数，表示它的键和值类型。但是有时需要更多的灵活性，如数据库行可以有任意多的列，
如果能以类型安全的方式访问所有的列就好了。方法是将键(key)进行参数化而不是将容器参数化。然后将参数化的键提交给容器，来插入或者获取值。
用泛型系统来确保值的类型与它的键相符。
Favorites类，它允许其客户端从任意数量的其他类中，保存并获取一个“最喜爱”的实例。Class对象充当参数化键的部分。之所以可以这样，
是因为类Class在Java1.5版本中被泛型化了。例如String.class属于Class<String>类型，Integer.class属于Class<Integer>类型。
public class Favorites{
	private Map<Class<?>, Object> favorites = new HashMap<Class<?>, Object>();
	public <T> void putFavorite(Class<T> type, T instance) {
		if(type == null) {
			throw new NullPointerException("Type is null");
                }
		favorites.put(type, instance);
	}
	public <T> T getFavarite(Class<T> type){
		return type.cast(favorites.get(type));
	}
}
public static void main(String[] args) {
	Favorites f = new Favorites();
	f.putFavorite(String.class, "java");
	f.putFavorite(Integer.class, 0xcafebabe);
	f.putFavorite(Class.class, Favorites.class);
	
	String fs = f.getFavarite(String.class);
	int ft = f.getFavarite(Integer.class);
	Class<?> fc = f.getFavarite(Class.class);
}

需要注意的是：
1）通配符是键的类型，因此每个键可以有一个不同的参数化类型，异构就从这里来。
2）值类型只是object。get方法将对象引用动态地转换。
局限：
1）恶意的客户端可以轻松地破坏Favorites实例的类型安全，只要以它的原生态形式使用Class对象。
解决方法是让put方法检验instance是否真的是type所表示的类型的实例。
public <T> void putFavorite(Class<T> type, T instance) {
	if(type == null) {
		throw new NullPointerException("Type is null");
	}
	favorites.put(type, type.cast(instance));
}
2)不能用于不可具体化的类型中。可以保存最喜爱的String或者String[]，但是不能保存最喜爱的List<String>。原因是无法为List<String>获得一个Class对象
