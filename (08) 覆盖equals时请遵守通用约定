在覆盖equals方法时，必要要遵守Object中关于equals的通用约定，它们是equals实现的等价关系(equivalence relation)。
1） 自反性(reflexive)。对于任何非null的引用值x，x.equals(x)必须返回true。
2） 对称性(symmetric)。对于任何非null引用值x和y，当且仅当y.equals(x)返回true时，x.equals(y)必须返回true。
3） 传递性(transitive)。对于任何非null引用值x、y、z，如果x.equals(y)返回true，并且y.equals(z)也返回true，那么x.equals(z)也必须返回true。
4） 一致性(consistent)。对于任何非null的引用值x和y，只要equals的比较操作在对象中所用的信息没有被修改，多次调用x.equals(y)
	就会一致的返回true或false。
	这个要求是如果两个对象相等，它们就必须始终保持相等，除非它们中至少有一个对象被修改了。或者说，可变对象在不同的时候可以
	与不同的对象相等，而不可变对象则不会这样。如果在编写一个类的时候确定它应该是不可变的，那就必须保证equals方法满足这样的
	限制，相等的对象永远相等，不相等的对象永远不相等。
5） 非空性(not null)。对于任何非null的引用值x，x.equals(null)必须返回false。

实现高质量equals方法的诀窍：
1） 使用==操作符检查”参数是否为这个对象的引用“。如果是，就返回true,这只不过是一种性能优化，如果比较操作很昂贵时就值得这么做。
2） 使用instanceof操作符检查”参数是否为正确的类型“。一般来说，所谓正确的类型指的是equals方法所在的那个类。
3） 把参数转换成正确的类型。
4） 对于该类中的每个”关键“域，检查参数中的哉是否与该对象中对应域相匹配。如果这些测试全部都成功，则返回true,否则返回false。
	如果第2步中的类型是个接口，那么就必须通过接口访问参数中的域，如果该类型是个类，也许就能够直接访问参数中的域，这要取决于
	他的可访问性。
	对于既不是float又不是double类型的基本类型域，可以直接使用==操作符进行比较，对于对象引用域，可以递归地调用equals方法。
	对于float域，可以使用Float.compare方法，对于double域可以使用Double.compare方法，这是因为浮点数的精度问题。存在着
	Float.NaN、-0.0f以及类似的double常量。对于数组域，则要把以上这些指导原则应用在每一个元素上，如果数组域中的每个元素都很
	重要，那么就可以考虑使用Arrays.equals方法
	有些对象引用域包含null可能是合法的。所以，为了避免可能导致NullPointException，则使用下面的习惯用法来比较这样的域。
	(field == null ? o.field == null : field.equals(o.field))
	如果field和o.field引用的是相同的对象引用，那么下面的做法更快一些。
	(field == o.field || (field != null && field.equals(o.field)  
5） 当编写完成equals方法之后，应该考虑它是否是对称的，传递的，一致的。还要编写些测试用例用来测试。一般情况下，自反和非空会
	自动满足。
	
注意事项：
1） 覆盖equals时总是要覆盖hashCode。
2） 不要企图让equals方法过于智能。过度去寻找各种等价关系很容易陷入麻烦之中。
3） 不要将equals声名中的Object对象替换成其他的类型。如果替换以后就是重载了Object类的equals类，而不是重写了。
	@Override可以防止范这种错误。
