不可变类：实例不能被修改的类。
不可变类比可变类更加易于设计、实现和使用，它们不容易出错，且更加安全。为了使类成不为不可变量，需要遵循以下五条原则：
1） 不要提供任何会修改对象状态的方法。(也称为mutator) 。
2） 保证类不会被扩展。这样可以防止精心或者恶意的子类假装对象的状态已经改变，从而破坏该类的不可变行为。为了防止子类化，一般的
	做法就使这个类成为final的。
3） 使所的有域都是final的。通过系统的强制方式，这可以清楚的表明你的意图。而且如果一个指向新创建实例的引用在缺乏同步机制的情
	况下，从一个线程被传到另一个线程就必需确保正确的行为。
4） 使所有的域都是私有的。这样可以防止客户端获得访问被域引用的可变对象的权限。并防止客户端直接修改这些对象。虽然从技术上来
	讲，允许不可变的类具有仅有的final域，只要这些域包含基本类型的值或者指向不可变的对象引用。但是不建议这样做，因为这样会便
	得在以后的版本中无法再改变内部的表示法，因为已经把它暴露给了客户端。
5） 确保对于任何可变组件的互斥访问。如果类具有指向可变对象的域，则必须确保该类的客户端无法获得指向这些对象的引用。并且，永
	远不要用客户端提供的对象引用来初始化这样的域，也不要从任何访问方法中返回该对象的引用。在构造器、访问方法和readObject方
	法中申请使用保护性拷贝(defensive copy)技术。

不可变对象本质上是线程安全的，它们不要求同步。不可变对象不需要进行保护性拷贝，也不应该为不可变对象提供clone方法或者拷贝构造器。
不仅可以共享不可变的对象，甚至也可以共享它们内部的信息(field)。不可变类的真正唯一缺点是：对于每个不同的值都需要一个单独的对象。

为了确保类的不变性，类绝对不允许自身被子类化，除了“使类成为final”之种方法外，还可以让类的所有构造器都变成私有的或者包级私有
的，并添加公有的静态工厂方法来代替公有构造器。虽然这种方法并不常用，但它经常是最好的替代方法。
public final class Complex {
	private final double re;
	private final double im;

	private Complex(double re, double im) {
		this.re = re;
		this.im = im;
	}

	public static Complex valueOf(double re, double im) {
		return new Complex(re, im);
	}
	...
}